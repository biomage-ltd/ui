name: Build and deploy the UI
on: [push, pull_request]
jobs:
  build:
    name: Build website
    runs-on: ubuntu-latest
    env:
      CI: "true"
    steps:
    - id: checkout
      name: Check out source code
      uses: actions/checkout@v2

    - id: cache-seek
      name: Check for npm cache hit
      uses: c-hive/gha-npm-cache@v1

    - id: install
      name: Install dependencies
      run: |-
        npm ci

    - id: test
      name: Run unit tests
      run: |-
        npm test

    - id: next-cache-seek
      name: Look up the Next.js build cache
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}

    - id: build
      name: Build project
      run: |-
        npm run build

    - id: upload-build-out
      name: Upload Next.js build output
      uses: actions/upload-artifact@v2
      with:
        name: next-build-out
        path: |
          .next/
          !.next/cache

  build-docker:
    name: Build Docker container
    runs-on: ubuntu-latest
    needs: build
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: download-build-out
        name: Download Next.js build output
        uses: actions/download-artifact@v2
        with:
          name: next-build-out
          path: .next/

      - id: ref
        name: Format docker tag and repository name.
        run: |-
          # This will take a ref like `refs/heads/master`
          # and turn it into `refs-heads-master`
          REF_ID=$(echo $GITHUB_REF | sed 's/\//-/g')

          # the final tag is something like:
          # refs-heads-master-a4f8bc313dae
          # this is what we push to ECR
          echo "::set-output name=tag::$REF_ID-$GITHUB_SHA"

          # This will take a GitHub repo name like `biomage-ltd/iac`
          # and turns it into `iac`. This will be the name of the
          # ECR repository.
          IMAGE_REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')
          echo "::set-output name=repo-name::$IMAGE_REPO_NAME"

      - id: set-up-creds
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - id: create-ecr-registry
        name: Create an ECR repository (if needed)
        # This will fail if the registry already exists, which is fine. If there is some other
        # error, the `push` step will fail instead.
        continue-on-error: true
        run: |-
          aws ecr create-repository --repository-name $REPO_NAME --image-tag-mutability IMMUTABLE
        env:
          REPO_NAME: ${{ steps.ref.outputs.repo-name }}

      - id: build
        name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          tags: ${{ format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.tag) }}
          push: false

      - id: push
        if: github.ref == 'refs/heads/master'
        name: Push docker image to ECR
        run: |-
          echo Pushing image $IMAGE_NAME to ECR.
          docker push $IMAGE_NAME
        env:
          IMAGE_NAME: ${{ format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.tag) }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-docker
    if:
      github.ref == 'refs/heads/master'
    strategy:
      matrix:
        environment: ['production', 'staging']
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: setup-aws
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - id: install-yq
        name: Install yq for modifying the eksctl yaml spec.
        run: |-
          sudo snap install yq

      - id: fill-metadata
        name: Fill out a new HelmRelease resource
        run: |-
          REF_DASHED=$(echo $GITHUB_REF | sed 's/\//-/g')
          DEPLOYMENT_NAME=$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')
          echo "::set-output name=deployment-name::$DEPLOYMENT_NAME"

          yq w -d1 .flux.yaml metadata.name "$DEPLOYMENT_NAME" \
          | yq w -d1 - metadata.namespace "$DEPLOYMENT_NAME-$REF_DASHED" \
          | yq w -d1 - "metadata.annotations[filter.fluxcd.io/chart-image]" "glob:$REF_DASHED-*" \
          | yq w -d1 - spec.releaseName "$DEPLOYMENT_NAME" \
          | yq w -d1 - spec.values.kubernetes.env "${{ matrix.environment }}" \
          | yq w -d1 - spec.values.biomageCi.ref "$REF_DASHED" \
          | yq w -d1 - spec.values.biomageCi.repo "$GITHUB_REPOSITORY" \
          | yq w -d1 - spec.values.image.registry "${{ steps.login-ecr.outputs.registry }}" \
          | yq w -d1 - spec.values.image.tag "$REF_DASHED-$GITHUB_SHA" \
          | yq w -d0 - metadata.name "$DEPLOYMENT_NAME-$REF_DASHED" \
          > $DEPLOYMENT_NAME-without-host.yaml

          if [ "${{ matrix.environment }}" = "production" ]
          then
            yq w -d1 $DEPLOYMENT_NAME-without-host.yaml spec.values.service.additionalHosts[+] "scp.biomage.net" > $DEPLOYMENT_NAME.yaml
          else
            yq w -d1 $DEPLOYMENT_NAME-without-host.yaml spec.values.service.additionalHosts[+] "scp-${{ matrix.environment }}.biomage.net" > $DEPLOYMENT_NAME.yaml
          fi

          cat $DEPLOYMENT_NAME.yaml

      - id: disable-admin-enforcement
        name: Temporarily disable admin enforcement
        uses: benjefferies/branch-protection-bot@master
        with:
          access-token: ${{ secrets.API_TOKEN_GITHUB }}
          owner: biomage-ltd
          repo: iac
          enforce_admins: false
          retries: 8

      - name: Push changes to iac repo
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: '${{ steps.fill-metadata.outputs.deployment-name }}.yaml'
          destination_repo: '${{ github.repository_owner }}/iac'
          destination_folder: 'releases/${{ matrix.environment }}'
          user_email: 'ci@biomage.net'
          user_name: 'Biomage CI/CD'

  enable-enforcement:
    name: Enable admin enforcement
    runs-on: ubuntu-latest
    needs: deploy
    if:
      always() && github.ref == 'refs/heads/master'
    steps:
      - id: enable-admin-enforcement
        name: Enable admin enforcement
        uses: benjefferies/branch-protection-bot@master
        with:
          access-token: ${{ secrets.API_TOKEN_GITHUB }}
          owner: biomage-ltd
          repo: iac
          enforce_admins: true
          retries: 8
